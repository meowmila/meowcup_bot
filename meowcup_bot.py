# MEOW.CUP - –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è Telegram –Ω–∞ aiogram 3 + Render Webhook

import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import setup_application
from aiohttp import web

API_TOKEN = "8193369093:AAGaD0CRTKhx2Ma2vhXiuOHjBkrNCQp23AU"
WEBHOOK_URL = "https://meowcup-bot.onrender.com/webhook"
ADMIN_ID = 947800235

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

users = set()
tournaments = []
user_state = {}

@dp.message(CommandStart())
async def start(message: Message):
    users.add((message.from_user.id, message.from_user.username, message.from_user.full_name))
    user_state[message.from_user.id] = {}
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text="üü¶ –ú–µ–Ω—é")]])
    if message.from_user.id == ADMIN_ID:
        kb.keyboard.append([KeyboardButton(text="üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MEOW.CUP!", reply_markup=kb)

@dp.message(F.text == "üü¶ –ú–µ–Ω—é")
async def menu_handler(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä", callback_data="type_tournament"),
         InlineKeyboardButton(text="üéâ –ò–≤–µ–Ω—Ç", callback_data="type_event")]
    ])
    await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=kb)

@dp.message(F.text == "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")],
        [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
        [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")]
    ])
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤")
async def list_tournaments(message: Message):
    if not tournaments:
        return await message.answer("–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—É—Å—Ç")
    text = "üìã –¢—É—Ä–Ω–∏—Ä—ã:\n"
    for i, t in enumerate(tournaments, 1):
        text += f"{i}. {t['–ù–∞–∑–≤–∞–Ω–∏–µ']} | {t['–î–∞—Ç–∞']} | {t['–§–æ—Ä–º–∞—Ç']} | {t['–¢–∏–ø']}\n"
    await message.answer(text)

@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def user_list(message: Message):
    if not users:
        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
    text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for i, u in enumerate(users, 1):
        uid, username, fullname = u
        text += f"{i}. <a href='tg://user?id={uid}'>{fullname}</a> (@{username})\n"
    await message.answer(text)

@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def broadcast_prompt(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (–∏/–∏–ª–∏ —Ñ–æ—Ç–æ) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    dp.labeler.message(lambda m: m.from_user.id == ADMIN_ID)(broadcast)

async def broadcast(message: Message):
    for uid, _, _ in users:
        try:
            if message.photo:
                photo_id = message.photo[-1].file_id
                await bot.send_photo(uid, photo=photo_id, caption=message.caption or "")
            else:
                await bot.send_message(uid, text=message.text or "")
        except:
            continue
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def add_tournament_prompt(message: Message):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–¢–∏–ø: tournament\n–§–æ—Ä–º–∞—Ç: Duo\n–î–∞—Ç–∞: 14.04.2025\n–í—Ä–µ–º—è: 18:00\n–°–ª–æ—Ç: Free\n–ù–∞–∑–≤–∞–Ω–∏–µ: MEOW SCRIMS\n–ü—Ä–∏–∑: 15000 ‚Ç∏\n–°—Ç–∞–¥–∏—è: 1/4\n–°–ª–æ—Ç—ã: 16\n–ü—Ä–æ—Ö–æ–¥: top 6\n–°—Å—ã–ª–∫–∞: https://t.me/meowcup_final")
    dp.labeler.message(lambda m: m.from_user.id == ADMIN_ID)(save_tournament)

async def save_tournament(message: Message):
    lines = message.text.split("\n")
    data = {}
    for line in lines:
        if ":" in line:
            k, v = line.split(":", 1)
            data[k.strip()] = v.strip()
    tournaments.append(data)
    await message.answer("‚úÖ –¢—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω")

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def delete_tournament_prompt(message: Message):
    if not tournaments:
        return await message.answer("–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—É—Å—Ç")
    text = "–£–¥–∞–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞:\n"
    for i, t in enumerate(tournaments, 1):
        text += f"{i}. {t['–ù–∞–∑–≤–∞–Ω–∏–µ']} | {t['–î–∞—Ç–∞']}\n"
    await message.answer(text)
    dp.labeler.message(lambda m: m.from_user.id == ADMIN_ID)(delete_by_index)

async def delete_by_index(message: Message):
    try:
        idx = int(message.text) - 1
        tournaments.pop(idx)
        await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–æ")
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
user_state = {}

@dp.callback_query(F.data.startswith("type_"))
async def choose_format(callback: CallbackQuery):
    user_state[callback.from_user.id] = {"–¢–∏–ø": callback.data.split("_")[1]}
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Duo", callback_data="format_Duo"),
         InlineKeyboardButton(text="Squad", callback_data="format_Squad")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=kb)

@dp.callback_query(F.data.startswith("format_"))
async def choose_date(callback: CallbackQuery):
    user_state[callback.from_user.id]["–§–æ—Ä–º–∞—Ç"] = callback.data.split("_")[1]
    base = datetime.strptime("14.04.2025", "%d.%m.%Y")
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=(base + timedelta(days=i)).strftime("%d.%m.%Y"), callback_data=f"date_{(base + timedelta(days=i)).strftime('%d.%m.%Y')}" ) for i in range(3)
    ], [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_format")]])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@dp.callback_query(F.data.startswith("date_"))
async def choose_slot(callback: CallbackQuery):
    user_state[callback.from_user.id]["–î–∞—Ç–∞"] = callback.data.split("_")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜì Free", callback_data="slot_Free"),
         InlineKeyboardButton(text="üí∏ VIP", callback_data="slot_VIP")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_date")]
    ])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:", reply_markup=kb)

@dp.callback_query(F.data.startswith("slot_"))
async def choose_time(callback: CallbackQuery):
    user_state[callback.from_user.id]["–°–ª–æ—Ç"] = callback.data.split("_")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="18:00", callback_data="time_18:00"),
         InlineKeyboardButton(text="21:00", callback_data="time_21:00")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_slot")]
    ])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)

@dp.callback_query(F.data.startswith("time_"))
async def show_result(callback: CallbackQuery):
    user_state[callback.from_user.id]["–í—Ä–µ–º—è"] = callback.data.split("_")[1]
    data = user_state[callback.from_user.id]
    filtered = [t for t in tournaments if all(t.get(k) == v for k, v in data.items())]

    if not filtered:
        return await callback.message.edit_text("üîú –ü–æ–∫–∞ –Ω–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_slot")]]))

    text = f"<b>‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n–¢–∏–ø: {data['–¢–∏–ø']}\n–§–æ—Ä–º–∞—Ç: {data['–§–æ—Ä–º–∞—Ç']}\n–î–∞—Ç–∞: {data['–î–∞—Ç–∞']}\n–°–ª–æ—Ç: {data['–°–ª–æ—Ç']}\n–í—Ä–µ–º—è: {data['–í—Ä–µ–º—è']}\n"
    for t in filtered:
        text += f"\nüèÜ <b>{t['–ù–∞–∑–≤–∞–Ω–∏–µ']}</b>\nêôö ‚îÇ –ü—Ä–∏–∑–æ–≤–æ–π: {t['–ü—Ä–∏–∑']}\nêôö ‚îÇ –°—Ç–∞–¥–∏—è: {t['–°—Ç–∞–¥–∏—è']}\nêôö ‚îÇ –°–ª–æ—Ç—ã: {t['–°–ª–æ—Ç—ã']}\nêôö ‚îÇ –ü—Ä–æ—Ö–æ–¥: {t['–ü—Ä–æ—Ö–æ–¥']}\n<a href='{t['–°—Å—ã–ª–∫–∞']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä–Ω–∏—Ä—É üêæ</a>"
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_slot")]]))

# –ù–∞–∑–∞–¥
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await menu_handler(callback.message)

@dp.callback_query(F.data == "back_to_format")
async def back_to_format(callback: CallbackQuery):
    await choose_format(callback)

@dp.callback_query(F.data == "back_to_date")
async def back_to_date(callback: CallbackQuery):
    await choose_date(callback)

@dp.callback_query(F.data == "back_to_slot")
async def back_to_slot(callback: CallbackQuery):
    await choose_slot(callback)

# Webhook
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

dp.startup.register(on_startup)
app = web.Application()
setup_application(app, dp, bot=bot)
web.run_app(app, port=10000)
