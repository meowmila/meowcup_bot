# MEOW.CUP Bot ‚Äî –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Ç—É—Ä–Ω–∏—Ä–∞

import os
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
from PIL import Image, ImageDraw, ImageFont
import io
import asyncio

API_TOKEN ="8193369093:AAGaD0CRTKhx2Ma2vhXiuOHjBkrNCQp23AU"
ADMIN_ID = 947800235

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

users = set()
tournaments = []
photos = {}
ctx = {}

class AddTournament(StatesGroup):
    waiting_photo = State()

class BroadcastState(StatesGroup):
    waiting_content = State()

# –£—Ç–∏–ª–∏—Ç—ã

def get_upcoming_dates():
    today = datetime.now()
    return [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(3)]

def build_keyboard(buttons, row=2):
    builder = InlineKeyboardBuilder()
    for b in buttons:
        builder.button(text=b, callback_data=b)
    builder.adjust(row)
    return builder.as_markup()

def overlay_text_on_image(image_bytes, text):
    image = Image.open(io.BytesIO(image_bytes)).convert("RGBA")
    draw = ImageDraw.Draw(image)
    try:
        font = ImageFont.truetype("arial.ttf", 40)
    except:
        font = ImageFont.load_default()
    width, _ = image.size
    text_width = draw.textlength(text, font=font)
    draw.rectangle([(0, 0), (width, 60)], fill=(0, 0, 0, 180))
    draw.text(((width - text_width) / 2, 10), text, fill="white", font=font)
    output = io.BytesIO()
    image.save(output, format='PNG')
    output.seek(0)
    return output

def cleanup_old():
    today = datetime.now().strftime("%d.%m.%Y")
    global tournaments
    tournaments = [t for t in tournaments if t['date'] >= today]

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(F.text == "/start")
async def start_cmd(message: Message):
    users.add(message.from_user.id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üü¶ –ú–µ–Ω—é"))
    if message.from_user.id == ADMIN_ID:
        kb.add(types.KeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MEOW.CUP!", reply_markup=kb)

@dp.message(F.text == "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    kb = build_keyboard(["–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∫–Ω–æ–ø–∫–∏", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞"])
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

@dp.callback_query(F.data == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_users(call: CallbackQuery):
    await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + str(len(users)))

@dp.callback_query(F.data == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∫–Ω–æ–ø–∫–∏")
async def ask_photo_upload(call: CallbackQuery):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é = –∫–æ–¥ –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00 –∏–ª–∏ '—Ç—É—Ä–Ω–∏—Ä')")

@dp.callback_query(F.data == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(call: CallbackQuery, state: FSMContext):
    await state.set_state(BroadcastState.waiting_content)
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ)")

@dp.message(BroadcastState.waiting_content)
async def handle_broadcast(message: Message, state: FSMContext):
    success = 0
    fail = 0
    for uid in users:
        try:
            if message.photo:
                await bot.send_photo(uid, photo=message.photo[-1].file_id, caption=message.caption or "")
            else:
                await bot.send_message(uid, message.text or "")
            success += 1
        except:
            fail += 1
    await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ {success}, ‚ùå {fail}")
    await state.clear()

@dp.message(F.photo & F.caption & (F.from_user.id == ADMIN_ID))
async def photo_button_upload(message: Message):
    photos[message.caption.lower()] = message.photo[-1].file_id
    await message.answer("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–¥ –∫–ª—é—á–æ–º: " + message.caption)

class AddTournament(StatesGroup):
    waiting_photo = State()

@dp.callback_query(F.data == "–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def ask_tournament_data(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–¥–∞—Ç–∞> | <–≤—Ä–µ–º—è> | <—Ç–∏–ø> | <—Å—Ç–∞–¥–∏—è> | <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <—Å—Å—ã–ª–∫–∞>")
    await state.set_state(AddTournament.waiting_photo)

@dp.message(AddTournament.waiting_photo & F.photo)
async def handle_add_tournament(message: Message, state: FSMContext):
    if not message.caption:
        await message.answer("–î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ!")
        return
    parts = [p.strip() for p in message.caption.split("|")]
    if len(parts) != 7:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 7 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ |")
        return
    date, time, type_, stage, title, desc, link = parts
    file = await bot.download(message.photo[-1])
    img = overlay_text_on_image(file.read(), title)
    sent = await bot.send_photo(message.chat.id, photo=img)
    tournaments.append({
        "date": date, "time": time, "type": type_.lower(), "stage": stage,
        "title": title, "desc": desc, "link": link, "photo": sent.photo[-1].file_id
    })
    await message.answer("‚úÖ –¢—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()
    cleanup_old()

@dp.message(F.text == "üü¶ –ú–µ–Ω—é")
async def open_main_menu(message: Message):
    kb = build_keyboard(["—Ç—É—Ä–Ω–∏—Ä", "–∏–≤–µ–Ω—Ç", "–ø—Ä–∞–∫–∏"], row=1)
    pid = photos.get("–º–µ–Ω—é")
    await message.answer_photo(pid, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", reply_markup=kb) if pid else await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", reply_markup=kb)

@dp.callback_query()
async def universal_flow(call: CallbackQuery):
    uid = call.from_user.id
    data = call.data

    if data in ["—Ç—É—Ä–Ω–∏—Ä", "–∏–≤–µ–Ω—Ç", "–ø—Ä–∞–∫–∏"]:
        ctx[uid] = {"type": data}
        kb = build_keyboard(get_upcoming_dates(), row=1)
        pid = photos.get(data)
        await call.message.answer_photo(pid, caption="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb) if pid else await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

    elif data in get_upcoming_dates():
        ctx[uid]["date"] = data
        kb = build_keyboard(["18:00", "21:00"])
        pid = photos.get(data)
        await call.message.answer_photo(pid, caption="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb) if pid else await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)

    elif data in ["18:00", "21:00"]:
        ctx[uid]["time"] = data
        if ctx[uid]['type'] == "–ø—Ä–∞–∫–∏":
            return await show_titles(call, uid)
        stages = sorted(set(t['stage'] for t in tournaments if t['date'] == ctx[uid]['date'] and t['time'] == data and t['type'] == ctx[uid]['type']))
        if not stages:
            return await show_titles(call, uid)
        kb = build_keyboard(stages)
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–¥–∏—é:", reply_markup=kb)

    elif data in ["1/8", "1/4", "1/2", "—Ñ–∏–Ω–∞–ª"]:
        ctx[uid]['stage'] = data
        kb = build_keyboard(["duo", "squad"])
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=kb)

    elif data in ["duo", "squad"]:
        ctx[uid]['format'] = data
        await show_titles(call, uid)

    elif any(t['title'] == data for t in tournaments):
        t = next(t for t in tournaments if t['title'] == data)
        text = f"""üèÜ <b>{t['title']}</b>

üç¨ ‚îÇ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: üí∏
üç¨ ‚îÇ –§—Ä–∏ —Å–ª–æ—Ç–æ–≤: 14
üç¨ ‚îÇ –°—Ç–∞–¥–∏—è: {t['stage']}
üç¨ ‚îÇ –ü—Ä–æ—Ö–æ–¥: –¢–æ–ø 6"""
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä–Ω–∏—Ä—É", url=t['link'])],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")]
        ])
        await call.message.answer_photo(t['photo'], caption=text, reply_markup=kb)

    elif data == "–ù–∞–∑–∞–¥":
        await open_main_menu(call.message)

async def show_titles(call, uid):
    filters = ctx[uid]
    filtered = [t for t in tournaments if all([
        t['type'] == filters['type'],
        t['date'] == filters['date'],
        t['time'] == filters['time'],
        filters.get('stage') is None or t['stage'] == filters['stage'],
        filters.get('format') is None or t.get('format') == filters['format']
    ])]
    if not filtered:
        await call.message.answer("–ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ —ç—Ç–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
        return
    kb = build_keyboard([t['title'] for t in filtered], row=1)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä:", reply_markup=kb)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    async def start():
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)

    asyncio.run(start())
