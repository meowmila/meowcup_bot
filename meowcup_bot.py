import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, InputFile
)
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties

API_TOKEN = "PASTE_YOUR_TOKEN_HERE"
ADMIN_ID = 947800235

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

users = set()
tournaments = []
user_state = {}

# === START ===
@dp.message(CommandStart())
async def start(message: Message):
    users.add((message.from_user.id, message.from_user.username, message.from_user.full_name))
    user_state[message.from_user.id] = {}
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text="üü¶ –ú–µ–Ω—é")]])
    if message.from_user.id == ADMIN_ID:
        kb.keyboard.append([KeyboardButton(text="üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MEOW.CUP!", reply_markup=kb)

# === –ú–µ–Ω—é ===
@dp.message(F.text == "üü¶ –ú–µ–Ω—é")
async def menu_handler(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä", callback_data="type_tournament")],
        [InlineKeyboardButton(text="üéâ –ò–≤–µ–Ω—Ç", callback_data="type_event")]
    ])
    await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=kb)

# === –®–∞–≥–∏ –≤—ã–±–æ—Ä–∞ ===
@dp.callback_query(F.data.startswith("type_"))
async def choose_format(callback: CallbackQuery):
    user_state[callback.from_user.id]["–¢–∏–ø"] = callback.data.split("_")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Duo", callback_data="format_Duo")],
        [InlineKeyboardButton(text="Squad", callback_data="format_Squad")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_start")]
    ])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=kb)

@dp.callback_query(F.data.startswith("format_"))
async def choose_date(callback: CallbackQuery):
    user_state[callback.from_user.id]["–§–æ—Ä–º–∞—Ç"] = callback.data.split("_")[1]
    today = datetime.now().date()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"date_{today.strftime('%d.%m.%Y')}")],
        [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"date_{(today + timedelta(days=1)).strftime('%d.%m.%Y')}")],
        [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", callback_data=f"date_{(today + timedelta(days=2)).strftime('%d.%m.%Y')}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_format")]
    ])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@dp.callback_query(F.data.startswith("date_"))
async def choose_slot(callback: CallbackQuery):
    user_state[callback.from_user.id]["–î–∞—Ç–∞"] = callback.data.split("_")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜì Free", callback_data="slot_Free")],
        [InlineKeyboardButton(text="üí∏ VIP", callback_data="slot_VIP")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_date")]
    ])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:", reply_markup=kb)

@dp.callback_query(F.data.startswith("slot_"))
async def choose_time(callback: CallbackQuery):
    user_state[callback.from_user.id]["–°–ª–æ—Ç"] = callback.data.split("_")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="18:00", callback_data="time_18:00")],
        [InlineKeyboardButton(text="21:00", callback_data="time_21:00")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_slot")]
    ])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)

@dp.callback_query(F.data.startswith("time_"))
async def show_result(callback: CallbackQuery):
    user_state[callback.from_user.id]["–í—Ä–µ–º—è"] = callback.data.split("_")[1]
    data = user_state[callback.from_user.id]
    text = (
        f"<b>‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n"
        f"–¢–∏–ø: {data['–¢–∏–ø']}\n"
        f"–§–æ—Ä–º–∞—Ç: {data['–§–æ—Ä–º–∞—Ç']}\n"
        f"–î–∞—Ç–∞: {data['–î–∞—Ç–∞']}\n"
        f"–°–ª–æ—Ç: {data['–°–ª–æ—Ç']}\n"
        f"–í—Ä–µ–º—è: {data['–í—Ä–µ–º—è']}\n"
    )
    await callback.message.edit_text(text)

# === –ù–∞–∑–∞–¥ ===
@dp.callback_query(F.data == "back_start")
async def back_to_start(callback: CallbackQuery):
    await menu_handler(callback.message)

@dp.callback_query(F.data == "back_format")
async def back_to_format(callback: CallbackQuery):
    await choose_format(callback)

@dp.callback_query(F.data == "back_date")
async def back_to_date(callback: CallbackQuery):
    await choose_date(callback)

@dp.callback_query(F.data == "back_slot")
async def back_to_slot(callback: CallbackQuery):
    await choose_slot(callback)

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
@dp.message(F.text == "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø–∞–Ω–µ–ª—å.")
    await message.answer(
        "<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä ‚Äî –æ—Ç–ø—Ä–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–¢–∏–ø: tournament\n–§–æ—Ä–º–∞—Ç: Duo\n–î–∞—Ç–∞: 14.04.2025\n–í—Ä–µ–º—è: 18:00\n–°–ª–æ—Ç: Free\n–ù–∞–∑–≤–∞–Ω–∏–µ: MEOW SCRIMS\n–ü—Ä–∏–∑: 15 000 ‚Ç∏\n–°—Ç–∞–¥–∏—è: 1/4\n–°–ª–æ—Ç—ã: 16\n–ü—Ä–æ—Ö–æ–¥: top 6\n–°—Å—ã–ª–∫–∞: https://t.me/meowcup_final\n\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä: –Ω–æ–º–µ—Ä\n‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞: —Ç–µ–∫—Å—Ç\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    )

@dp.message(F.text.startswith("–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä:"))
async def add_tournament(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        lines = message.text.splitlines()[1:]
        data = {line.split(": ")[0]: line.split(": ")[1] for line in lines}
        tournaments.append(data)
        await message.answer("‚úÖ –¢—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω.")
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.")

@dp.message(F.text.startswith("–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä:"))
async def delete_tournament(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        idx = int(message.text.split(":")[1].strip()) - 1
        tournaments.pop(idx)
        await message.answer("üóë –¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª—ë–Ω.")
    except:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä.")

@dp.message(F.text.startswith("–†–∞—Å—Å—ã–ª–∫–∞:"))
async def broadcast(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    text = message.text.replace("–†–∞—Å—Å—ã–ª–∫–∞:", "").strip()
    for uid, _, _ in users:
        try:
            await bot.send_message(uid, f"üì¢ {text}")
        except:
            continue
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

@dp.message(F.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, (uid, uname, full) in enumerate(users, 1):
        link = f'<a href="tg://user?id={uid}">{full}</a>'
        text += f"{i}. {uname or '‚Äî'} ‚Äî {link}\n"
    await message.answer(text)

# === –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
async def cleanup_old():
    while True:
        today = datetime.now().date()
        tournaments[:] = [t for t in tournaments if datetime.strptime(t['–î–∞—Ç–∞'], "%d.%m.%Y").date() >= today]
        await asyncio.sleep(3 * 60 * 60)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    asyncio.create_task(cleanup_old())
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())

