# MEOW.CUP ‚Äî –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Ñ–∏—à–∫–∞–º–∏ (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)

import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web

API_TOKEN = "8193369093:AAGaD0CRTKhx2Ma2vhXiuOHjBkrNCQp23AU"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://meowcup-bot.onrender.com{WEBHOOK_PATH}"
ADMIN_ID = 947800235

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

users = set()
tournaments = []
user_state = {}

@dp.message(CommandStart())
async def start(message: Message):
    users.add((message.from_user.id, message.from_user.username, message.from_user.full_name))
    user_state[message.from_user.id] = {}
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text="üü¶ –ú–µ–Ω—é")]])
    if message.from_user.id == ADMIN_ID:
        kb.keyboard.append([KeyboardButton(text="üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MEOW.CUP!", reply_markup=kb)

@dp.message(F.text == "üü¶ –ú–µ–Ω—é")
async def menu(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä", callback_data="type_tournament"),
        InlineKeyboardButton(text="üéâ –ò–≤–µ–Ω—Ç", callback_data="type_event")
    ]])
    await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=kb)

@dp.message(F.text == "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")],
        [KeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞")],
        [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
        [KeyboardButton(text="üü¶ –ú–µ–Ω—é")]
    ])
    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞:", reply_markup=kb)

@dp.message(F.text == "üì§ –†–∞—Å—Å—ã–ª–∫–∞")
async def admin_broadcast(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    user_state[message.from_user.id] = {"mode": "broadcast"}

@dp.message(F.photo)
async def handle_photo_broadcast(message: Message):
    if user_state.get(message.from_user.id, {}).get("mode") == "broadcast":
        sent = 0
        for uid, _, _ in users:
            try:
                await bot.send_photo(uid, message.photo[-1].file_id, caption=message.caption or "")
                sent += 1
            except: continue
        await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        user_state[message.from_user.id] = {}

@dp.message()
async def handle_admin_text(message: Message):
    if message.from_user.id == ADMIN_ID and user_state.get(message.from_user.id, {}).get("mode") == "broadcast":
        for uid, _, _ in users:
            try:
                await bot.send_message(uid, f"üì£ –†–∞—Å—Å—ã–ª–∫–∞:\n{message.text}")
            except: continue
        await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        user_state[message.from_user.id] = {}

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def add_tournament(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä:
–¢–∏–ø: tournament\n–§–æ—Ä–º–∞—Ç: Duo\n–î–∞—Ç–∞: 14.04.2025\n–í—Ä–µ–º—è: 18:00\n–°–ª–æ—Ç: Free\n–ù–∞–∑–≤–∞–Ω–∏–µ: MEOW SCRIMS\n–ü—Ä–∏–∑: 15000 ‚Ç∏\n–°—Ç–∞–¥–∏—è: 1/4\n–°–ª–æ—Ç—ã: 16\n–ü—Ä–æ—Ö–æ–¥: top 6\n–°—Å—ã–ª–∫–∞: https://t.me/...")
    user_state[message.from_user.id] = {"mode": "adding"}

@dp.message()
async def receive_tournament(message: Message):
    if user_state.get(message.from_user.id, {}).get("mode") == "adding":
        data = {}
        for line in message.text.splitlines():
            if ":" in line:
                key, value = line.split(":", 1)
                data[key.strip()] = value.strip()
        data["–§–æ—Ç–æ"] = None
        tournaments.append(data)
        await message.answer("‚úÖ –¢—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω! –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        user_state[message.from_user.id] = {"mode": "add_photo", "data": data}
    elif user_state.get(message.from_user.id, {}).get("mode") == "add_photo":
        if message.photo:
            user_state[message.from_user.id]["data"]["–§–æ—Ç–æ"] = message.photo[-1].file_id
            await message.answer("üñº –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ —Ç—É—Ä–Ω–∏—Ä—É!")
        else:
            await message.answer("–§–æ—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –¢—É—Ä–Ω–∏—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        user_state[message.from_user.id] = {}

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤")
async def list_tournaments(message: Message):
    if not tournaments:
        return await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    text = "üìã –¢—É—Ä–Ω–∏—Ä—ã:\n"
    for i, t in enumerate(tournaments, 1):
        text += f"{i}. {t['–ù–∞–∑–≤–∞–Ω–∏–µ']} | {t['–î–∞—Ç–∞']} | {t['–§–æ—Ä–º–∞—Ç']}\n"
    await message.answer(text)

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def prompt_delete(message: Message):
    if not tournaments:
        return await message.answer("–ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    for i, t in enumerate(tournaments, 1):
        text += f"{i}. {t['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
    await message.answer(text)
    user_state[message.from_user.id] = {"mode": "delete"}

@dp.message()
async def delete_tournament(message: Message):
    if user_state.get(message.from_user.id, {}).get("mode") == "delete":
        try:
            idx = int(message.text) - 1
            tournaments.pop(idx)
            await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–æ")
        except:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        user_state[message.from_user.id] = {}

@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_users(message: Message):
    text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for i, (uid, username, full_name) in enumerate(users, 1):
        text += f"{i}. <a href='tg://user?id={uid}'>{full_name}</a> (@{username})\n"
    await message.answer(text)

@dp.callback_query(F.data.startswith("type_"))
async def choose_format(callback: CallbackQuery):
    user_state[callback.from_user.id] = {"–¢–∏–ø": callback.data.split("_")[1]}
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Duo", callback_data="format_Duo"),
         InlineKeyboardButton(text="Squad", callback_data="format_Squad")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=kb)

@dp.callback_query(F.data.startswith("format_"))
async def choose_date(callback: CallbackQuery):
    user_state[callback.from_user.id]["–§–æ—Ä–º–∞—Ç"] = callback.data.split("_")[1]
    base = datetime.strptime("14.04.2025", "%d.%m.%Y")
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text=(base + timedelta(days=i)).strftime("%d.%m.%Y"),
            callback_data=f"date_{(base + timedelta(days=i)).strftime('%d.%m.%Y')}"
        ) for i in range(3)
    ], [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_format")]])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@dp.callback_query(F.data.startswith("date_"))
async def choose_slot(callback: CallbackQuery):
    user_state[callback.from_user.id]["–î–∞—Ç–∞"] = callback.data.split("_")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜì Free", callback_data="slot_Free"),
         InlineKeyboardButton(text="üí∏ VIP", callback_data="slot_VIP")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_date")]
    ])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:", reply_markup=kb)

@dp.callback_query(F.data.startswith("slot_"))
async def choose_time(callback: CallbackQuery):
    user_state[callback.from_user.id]["–°–ª–æ—Ç"] = callback.data.split("_")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="18:00", callback_data="time_18:00"),
         InlineKeyboardButton(text="21:00", callback_data="time_21:00")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_slot")]
    ])
    await callback.message.edit_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)

@dp.callback_query(F.data.startswith("time_"))
async def result(callback: CallbackQuery):
    user_state[callback.from_user.id]["–í—Ä–µ–º—è"] = callback.data.split("_")[1]
    data = user_state[callback.from_user.id]
    filtered = [t for t in tournaments if all(t.get(k) == v for k, v in data.items())]

    if not filtered:
        await callback.message.edit_text("üîú –ü–æ–∫–∞ –Ω–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_slot")]]))
        return

    text = f"<b>‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n–¢–∏–ø: {data['–¢–∏–ø']}\n–§–æ—Ä–º–∞—Ç: {data['–§–æ—Ä–º–∞—Ç']}\n–î–∞—Ç–∞: {data['–î–∞—Ç–∞']}\n–°–ª–æ—Ç: {data['–°–ª–æ—Ç']}\n–í—Ä–µ–º—è: {data['–í—Ä–µ–º—è']}"
    for t in filtered:
        text += f"\n\nüèÜ <b>{t['–ù–∞–∑–≤–∞–Ω–∏–µ']}</b>\nêôö ‚îÇ –ü—Ä–∏–∑: {t['–ü—Ä–∏–∑']}\nêôö ‚îÇ –°—Ç–∞–¥–∏—è: {t['–°—Ç–∞–¥–∏—è']}\nêôö ‚îÇ –°–ª–æ—Ç—ã: {t['–°–ª–æ—Ç—ã']}\nêôö ‚îÇ –ü—Ä–æ—Ö–æ–¥: {t['–ü—Ä–æ—Ö–æ–¥']}\n<a href='{t['–°—Å—ã–ª–∫–∞']}'>–ü–µ—Ä–µ–π—Ç–∏ üêæ</a>"
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_slot")]]))

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
@dp.callback_query(F.data == "back_to_menu")
async def back_menu(callback: CallbackQuery):
    await menu(callback.message)

@dp.callback_query(F.data == "back_to_format")
async def back_format(callback: CallbackQuery):
    await choose_format(callback)

@dp.callback_query(F.data == "back_to_date")
async def back_date(callback: CallbackQuery):
    await choose_date(callback)

@dp.callback_query(F.data == "back_to_slot")
async def back_slot(callback: CallbackQuery):
    await choose_slot(callback)

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def cleanup_old():
    today = datetime.today().date()
    before = len(tournaments)
    tournaments[:] = [t for t in tournaments if datetime.strptime(t['–î–∞—Ç–∞'], "%d.%m.%Y").date() >= today]
    print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {before - len(tournaments)} —Å—Ç–∞—Ä—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤")

# Webhook
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    await cleanup_old()

app = web.Application()
dp.startup.register(on_startup)
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
app.router.add_get("/", lambda _: web.Response(text="MEOW.CUP OK"))

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, port=10000)
